// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/chess.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChessService_StartGame_FullMethodName    = "/chess.ChessService/StartGame"
	ChessService_SubmitMove_FullMethodName   = "/chess.ChessService/SubmitMove"
	ChessService_GetGameState_FullMethodName = "/chess.ChessService/GetGameState"
)

// ChessServiceClient is the client API for ChessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChessServiceClient interface {
	StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*StartGameResponse, error)
	SubmitMove(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
	GetGameState(ctx context.Context, in *GameStateRequest, opts ...grpc.CallOption) (*GameStateResponse, error)
}

type chessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChessServiceClient(cc grpc.ClientConnInterface) ChessServiceClient {
	return &chessServiceClient{cc}
}

func (c *chessServiceClient) StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*StartGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartGameResponse)
	err := c.cc.Invoke(ctx, ChessService_StartGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chessServiceClient) SubmitMove(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, ChessService_SubmitMove_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chessServiceClient) GetGameState(ctx context.Context, in *GameStateRequest, opts ...grpc.CallOption) (*GameStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GameStateResponse)
	err := c.cc.Invoke(ctx, ChessService_GetGameState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChessServiceServer is the server API for ChessService service.
// All implementations must embed UnimplementedChessServiceServer
// for forward compatibility.
type ChessServiceServer interface {
	StartGame(context.Context, *StartGameRequest) (*StartGameResponse, error)
	SubmitMove(context.Context, *MoveRequest) (*MoveResponse, error)
	GetGameState(context.Context, *GameStateRequest) (*GameStateResponse, error)
	mustEmbedUnimplementedChessServiceServer()
}

// UnimplementedChessServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChessServiceServer struct{}

func (UnimplementedChessServiceServer) StartGame(context.Context, *StartGameRequest) (*StartGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedChessServiceServer) SubmitMove(context.Context, *MoveRequest) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitMove not implemented")
}
func (UnimplementedChessServiceServer) GetGameState(context.Context, *GameStateRequest) (*GameStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameState not implemented")
}
func (UnimplementedChessServiceServer) mustEmbedUnimplementedChessServiceServer() {}
func (UnimplementedChessServiceServer) testEmbeddedByValue()                      {}

// UnsafeChessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChessServiceServer will
// result in compilation errors.
type UnsafeChessServiceServer interface {
	mustEmbedUnimplementedChessServiceServer()
}

func RegisterChessServiceServer(s grpc.ServiceRegistrar, srv ChessServiceServer) {
	// If the following call pancis, it indicates UnimplementedChessServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChessService_ServiceDesc, srv)
}

func _ChessService_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChessServiceServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChessService_StartGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChessServiceServer).StartGame(ctx, req.(*StartGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChessService_SubmitMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChessServiceServer).SubmitMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChessService_SubmitMove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChessServiceServer).SubmitMove(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChessService_GetGameState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChessServiceServer).GetGameState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChessService_GetGameState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChessServiceServer).GetGameState(ctx, req.(*GameStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChessService_ServiceDesc is the grpc.ServiceDesc for ChessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chess.ChessService",
	HandlerType: (*ChessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartGame",
			Handler:    _ChessService_StartGame_Handler,
		},
		{
			MethodName: "SubmitMove",
			Handler:    _ChessService_SubmitMove_Handler,
		},
		{
			MethodName: "GetGameState",
			Handler:    _ChessService_GetGameState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chess.proto",
}
